WHAT IS THIS
    The AElfred2 implementation of a SAX2 parser, the DOM2 implementation
    of DOM Level 2, SAX2 XML pipeline utilities (including a streaming
    DTD validator), and JAXP glue for those standard APIs.

    This is intended only to require JDK 1.1 support to compile or run;
    that may change at some point, but for now portability to PJava and
    other widely used Java configurations/profiles is important.
    
    GCJ 3.0 has a bug (PR 3285?) preventing the "DomNode" implementation
    class from compiling, it can't find constructors for some DomEvent
    classes.  Newer snapshots may fix this.

JAVA PACKAGES
    
    javax.xml.*		... JAXP 1.1 interfaces
    org.xml.sax.*	... SAX2 interfaces
    org.w3c.dom.*	... DOM Level 2 interfaces

    gnu.xml.aelfred2.*	... SAX2 parsers (and JAXP glue)
    gnu.xml.dom.*	... DOM level 2 (XML) implementation
    gnu.xml.pipeline.*	... SAX2 event stream utilities
    gnu.xml.util.*	... various XML utility classes

LICENSING
    The software in this package is distributed under the GNU
    General Public License, with the exception of DOM interface
    sources which are subject instead to the W3C license.

    In addition, the files distributed under GPL include the
    following special exception.

	As a special exception, if you link this library with
	other files to produce an executable, this library does
	not by itself cause the resulting executable to be covered
	by the GNU General Public License. This exception does
	not however invalidate any other reasons why the executable
	file might be covered by the GNU General Public License. 

    As such, it can be used to run free as well as proprietary
    applications and applets:  static linking is permitted, so
    this can even be used in embedded configurations.

	COPYING		... contains the GPL text.
	COPYRIGHT.html	... contains the W3C license.
    
    The SAX/SAX2 files, originally in the public domain, have
    been updated; those updates are under the GPL.  SAX2 APIs
    remain unchanged.

BUILDING
    This software uses autoconf; eventually it should learn how to figure
    out the right Java compiler (JDK, GCJ, Kaffe, etc) to use when building
    this software.

    1 - "autoconf" ... generates "configure"
    
    2 - "configure" ... generates Makefile matching the build environment

    3 - "make" ... builds gnujaxp.jar

    Also see the Makefile.  Targets include:

	- "clean" (expecting rebuild from scratch)

	- "distclean" (expecting "configure" to be run)

	- "mrproper" (expecting autoconf to be run)
    
    So far there's no way to package a source distribution; stick to CVS.

CONFORMANCE TESTING
    The primary test resources are at http://xmlconf.sourceforge.net
    and include:

    SAX1 and XML conformance tests
	The AElfred2 parser is highly conformant, though it still takes
	a few implementation shortcuts.  See the package documentation
	for information about known XML conformance issues in AElfred2.

	Note that the "xml.testing.Driver" only addresses the core
	XML 1.0 specification requirements, which roughly correspond
	to what SAX1 provides.
	
	SAX2 conformance, including namespace support and support for
	LexicalHandler and Declhandler extensions, doesn't currently
	have a good test suite/driver.  However:

	    - Applying the DOM unit tests to this implementation gives
	      the LexicalHandler (comments, and boundaries of DTDs,
	      CDATA sections, and general entities) a workout, and
	      does the same for at least internal general entity
	      declarations;
	    
	    - The pipeline package's layered validator demands that
	      element and attribute declarations work correctly.
	
	By those metrics, SAX2 conformance for AElfred2 is also strong. 
    
    DOM Unit Tests
	The "domunit 0.0.4" tests use the JAXP API to hook up a DOM
	implementation to a parser (out of scope for DOM L2).

	At this writing, this passes the bulk of those tests except
	for a few which require magic handling of attributes:

	    - DOM wants to expose which attributes were specified
	      in the literal text of an XML document.  SAX doesn't
	      expose that information.
	    
	    - DOM expects that attributes that are defaulted in
	      the DTD will magically reappear when they're deleted.
	      This DOM could implement that behavior, but doesn't.
	
	Some JAXP DOM feature flags aren't fully supported, though
	they could be.  That is, properties affecting which "noise nodes"
	end up in the DOM tree aren't all supported.  (Stuff like
	ignorable whitespace, CDATA section boundaries, entity references,
	and so on.)  The JAXP defaults are supported, but otherwise you
	may need to turn off almost all "noise" to get some peace.

