WHAT IS THIS
    GNUJAXP includes interfaces and implementations for basic XML
    processing in Java, and some general purpose SAX2 utilities.

    The standard distribution includes "gnujaxp.jar", javadoc, and full
    source code.  The current software is available at:

    	http://www.gnu.org/software/classpathx/jaxp

    This is intended only to require JDK 1.1 support to compile or run;
    that may change at some point, but for now portability to PJava and
    other widely used Java configurations/profiles is important.
    
    GCJ 3.0 has some bugs compiling this code, either to class files or
    to native code.  Newer snapshots (GCJ 3.1) are currently needed to
    compile this code.

JAVA PACKAGES
    
    javax.xml.*		... JAXP 1.1 interfaces
    org.xml.sax.*	... SAX2 (r2pre2) interfaces
    org.w3c.dom.*	... DOM Level 2 interfaces

    gnu.xml.aelfred2.*	... SAX2 parsers (+ optional validator, and JAXP glue)
    gnu.xml.dom.*	... DOM level 2 (XML) implementation (and JAXP glue)
    gnu.xml.pipeline.*	... SAX2 event pipeline support
    gnu.xml.util.*	... various XML utility classes

LICENSING
    Briefly, most software in this package is distributed under the
    GNU General Public License with the "library exception" that 
    permits its usage even in statically linked environments.  That
    licensing is more permissive than the "LGPL".

    See the LICENSE file for more information.

BUILDING
    The default build tools use autoconf and GNU make.  At this writing
    you have two configuration options.  Most developers will use a JDK
    environment to build:

    	$ ./configure
	...
	$ make all
	...
	$
    
    Some versions of GCJ (after 3.0) can compile this to class files:

    	$ ./configure --with-gcj
	...
	$ make all
	...
	$

    In the future, using GCJ (some versions after 3.0) to native code
    will be supported.

    Also see the autoconf files (you may need CVS access).

INSTALLATION AND CONFIGURATION
    The simplest way to use this software is to put the "gnujaxp.jar"
    file into $JAVA_HOME/jre/lib/ext so that it's automatically part
    of the classpath for every application.  That works for JDK 1.2
    and later.

    Otherwise, you'll need some other way to put it into $CLASSPATH,
    such as an environment variable.

    If you have multiple XML tools implementations in your environment,
    you may need to configure software to use the implementations in 
    the GNUJAXP distribution rather than some other one.  See the project
    website (http://www.gnu.org/software/classpathx/jaxp) for information.

CONFORMANCE TESTING
    The primary test resources are at http://xmlconf.sourceforge.net
    and include:

    SAX1 and XML conformance tests
	The AElfred2 parser is highly conformant, though it still takes
	a few implementation shortcuts.  See the package documentation
	for information about known XML conformance issues in AElfred2.
	The primary issue is using Unicode character tables, rather than
	those in the XML specification, for determining what names are
	valid.  (Most applications won't notice the difference.)

	Note that the "xml.testing.Driver" only addresses the core
	XML 1.0 specification requirements, which roughly correspond
	to what SAX1 provides.
	
	SAX2 conformance, including namespace support and support for
	LexicalHandler and Declhandler extensions, doesn't currently
	have a good test suite/driver.  However:

	    - Applying the DOM unit tests to this implementation gives
	      the LexicalHandler (comments, and boundaries of DTDs,
	      CDATA sections, and general entities) a workout, and
	      does the same for at least internal general entity
	      declarations;
	    
	    - The pipeline package's layered validator demands that
	      element and attribute declarations are reported correctly.
	
	By those metrics, SAX2 conformance for AElfred2 is also strong. 
    
    DOM Unit Tests
	The "domunit 0.0.6" tests use the JAXP API to hook up a DOM
	implementation to a parser (out of scope for DOM L2).

	At this writing, this passes the bulk of those tests except
	for a few which require magic handling of attributes:

	    - DOM expects that attributes that are defaulted in
	      the DTD will magically reappear when they're deleted.
	      This DOM could implement that behavior, but doesn't.
	
	Some JAXP DOM feature flags aren't fully supported, though
	they could be.  That is, properties affecting which "noise nodes"
	end up in the DOM tree aren't all supported.  (Stuff like
	ignorable whitespace, CDATA section boundaries, entity references,
	and so on.)  The JAXP defaults are supported, but otherwise you
	may need to turn off almost all "noise" to get some peace.

