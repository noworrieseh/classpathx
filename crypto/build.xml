<?xml version="1.0"?>

<!--
   $Id: build.xml,v 1.9 2002-05-14 08:57:49 raif Exp $

   Copyright (C) 2001-2002, Free Software Foundation, Inc.

   This program is free software; you can redistribute it and/or modify it
   under the terms of the GNU General Public License as published by the Free
   Software Foundation; either version 2 of the License or (at your option) any
   later version.

   This program is distributed in the hope that it will be useful, but WITHOUT
   ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
   FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for
   more details.

   You should have received a copy of the GNU General Public License along with
   this program; see the file COPYING.  If not, write to the

      Free Software Foundation Inc.,
      59 Temple Place - Suite 330,
      Boston, MA 02111-1307
      USA

   As a special exception, if you link this library with other files to produce
   an executable, this library does not by itself cause the resulting
   executable to be covered by the GNU General Public License.  This exception
   does not however invalidate any other reasons why the executable file might
   be covered by the GNU General Public License.
-->

<project name="gnu-crypto" default="jar" basedir=".">

   <!--
   global properties ..........................................................
   -->

   <!-- give user a chance to override with personal settings -->
   <property file="${user.home}/.ant.properties" />
   <property file=".ant.properties" />

   <property name="debug" value="true"/>
   <property name="optimize" value="false"/>

   <!-- standard directories -->
   <property name="classes.dir" value="classes"/>
   <property name="docs.dir" value="docs"/>
   <property name="etc.dir" value="etc"/>
   <property name="lib.dir" value="lib"/>
   <property name="src.dir" value="source"/>

   <property name="package.name" value="${package}-${version}"/>
   <property name="main.jar" value="${lib.dir}/${package}.jar"/>
   <property name="test.jar" value="${lib.dir}/${package}-test.jar"/>

   <property name="junit.version" value="3.7"/>
   <property name="junit.url" value="http://download.sourceforge.net/junit"/>
   <property name="junit.jar" value="${lib.dir}/junit.jar"/>

   <!--
   default targets ............................................................
   -->
   <target name="configure"
           depends="config-junit"
           description="Create temporary directories for a build">
      <tstamp/>
      <mkdir dir="${classes.dir}"/>
      <mkdir dir="${lib.dir}"/>
      <mkdir dir="tv"/>
   </target>

   <patternset id="toplevel_files">
      <include name="AUTHORS"/>
      <include name="ChangeLog"/>
      <include name="COPYING"/>
      <include name="LICENSE"/>
      <include name="NEWS"/>
      <include name="README"/>
      <include name="THANKS"/>
   </patternset>

   <target name="jar" depends="configure,compile"
           description="Create the project's main .jar file">
      <copy todir="${classes.dir}">
         <fileset dir="${basedir}">
            <patternset refid="toplevel_files"/>
         </fileset>
      </copy>
      <jar jarfile="${main.jar}" basedir="${classes.dir}"
           manifest="${etc.dir}/gnu-crypto.mf"/>
   </target>

   <target name="compile" depends="configure">
      <javac destdir="${classes.dir}"
             debug="${debug}"
             optimize="${optimize}"
             srcdir="${src.dir}"
             includes="gnu/crypto/**/*.java"/>
   </target>

   <!--
   Minimal tests to pass before release .......................................
   -->
   <target name="test" depends="jar,jar-test"
           description="Run built-in tests to ensure correctness of .jar file">
      <java classname="test.AllTests"
            fork="yes" taskname="junit" failonerror="true">
         <classpath>
            <pathelement location="${test.jar}"/>
            <pathelement location="${main.jar}"/>
            <pathelement location="${junit.jar}"/>
         </classpath>
      </java>
   </target>

   <target name="jar-test" depends="compile-test">
      <jar jarfile="${test.jar}" basedir="${classes.dir}" includes="test/**"/>
   </target>

   <target name="compile-test" depends="jar">
      <javac destdir="${classes.dir}" debug="${debug}" optimize="${optimize}">
         <classpath>
            <pathelement location="${junit.jar}"/>
            <pathelement location="${main.jar}"/>
         </classpath>
         <src path="${src.dir}"/>
         <include name="test/**"/>
      </javac>
   </target>

   <!--
   Generating test vectors and exercising algorithms the NESSIE way ...........

   NOTE: To fully generate the tests, including those that take _hours_,
   invoke the call like so:

      ant -DTORTURE=true nessie

   or any of its sub-tasks.
   -->
   <target name="nessie" depends="jar"
           description="Generate test vectors according to the NESSIE specifications">
      <parallel>
         <antcall target="ra"/>
         <antcall target="doum"/>
         <antcall target="pool"/>
      </parallel>
   </target>

   <target name="ra" depends="jar">
      <antcall target="amoun-ra">
         <param name="keysize" value="128"/>
      </antcall>
      <antcall target="amoun-ra">
         <param name="keysize" value="160"/>
      </antcall>
      <antcall target="amoun-ra">
         <param name="keysize" value="192"/>
      </antcall>
      <antcall target="amoun-ra">
         <param name="keysize" value="224"/>
      </antcall>
      <antcall target="amoun-ra">
         <param name="keysize" value="256"/>
      </antcall>
      <antcall target="amoun-ra">
         <param name="keysize" value="288"/>
      </antcall>
      <antcall target="amoun-ra">
         <param name="keysize" value="320"/>
      </antcall>
   </target>

   <target name="amoun-ra">
      <echo message="Computing test vectors for Anubis (${keysize}-bit key)"/>
      <java classname="gnu.crypto.tool.NessieCipherTVEmitter"
            fork="yes" failonerror="true" classpath="${main.jar}"
            output="tv/anubis-${keysize}-tv.txt">
         <arg value="anubis"/>
         <arg value="${keysize}"/>
      </java>
   </target>

   <target name="doum" depends="jar">
      <echo message="Computing test vectors for Khazad"/>
      <java classname="gnu.crypto.tool.NessieCipherTVEmitter"
            fork="yes" failonerror="true" classpath="${main.jar}"
            output="tv/khazad-tv.txt">
         <arg value="khazad"/>
      </java>
   </target>

   <target name="pool" depends="jar">
      <echo message="Computing test vectors for Whirlpool"/>
      <java classname="gnu.crypto.tool.NessieHashTVEmitter"
            fork="yes" failonerror="true" classpath="${main.jar}"
            output="tv/whirlpool-tv.txt">
         <arg value="whirlpool"/>
      </java>
   </target>

   <!--
   Exercise block ciphers to measure their performance ........................
   -->
   <target name="speed" depends="jar"
           description="Exercise block ciphers to measure performance">
      <java classname="gnu.crypto.tool.CipherSpeed"
            fork="yes" failonerror="true" classpath="${main.jar}"/>
      <java classname="gnu.crypto.tool.HashSpeed"
            fork="yes" failonerror="true" classpath="${main.jar}"/>
   </target>

   <!--
   Generating test vectors and exercising algorithms the NIST way .............
   -->
   <target name="kat" depends="jar"
           description="Output test vectors in compliance with NIST's KAT">
      <parallel>
         <antcall target="nist-kat">
            <param name="cipher" value="khazad"/>
            <param name="keysize" value="128"/>
         </antcall>
         <antcall target="nist-kat">
            <param name="cipher" value="anubis"/>
            <param name="keysize" value="128"/>
         </antcall>
         <antcall target="nist-kat">
            <param name="cipher" value="anubis"/>
            <param name="keysize" value="160"/>
         </antcall>
         <antcall target="nist-kat">
            <param name="cipher" value="anubis"/>
            <param name="keysize" value="192"/>
         </antcall>
         <antcall target="nist-kat">
            <param name="cipher" value="anubis"/>
            <param name="keysize" value="224"/>
         </antcall>
         <antcall target="nist-kat">
            <param name="cipher" value="anubis"/>
            <param name="keysize" value="256"/>
         </antcall>
         <antcall target="nist-kat">
            <param name="cipher" value="anubis"/>
            <param name="keysize" value="288"/>
         </antcall>
         <antcall target="nist-kat">
            <param name="cipher" value="anubis"/>
            <param name="keysize" value="320"/>
         </antcall>
      </parallel>
   </target>

   <target name="nist-kat">
      <echo message="Running NIST KAT tool for ${cipher} (${keysize}-bit key)"/>
      <java classname="gnu.crypto.tool.NistKat"
            fork="yes" failonerror="true" classpath="${main.jar}"
            output="tv/${cipher}-ecb-${keysize}-kat.txt">
         <arg value="${cipher}"/>
         <arg value="${keysize}"/>
      </java>
   </target>

   <target name="mct" depends="jar"
           description="Output test vectors in compliance with NIST's MCT">
      <parallel>
         <antcall target="nist-mct">
            <param name="cipher" value="khazad"/>
            <param name="keysize" value="128"/>
         </antcall>
         <antcall target="nist-mct">
            <param name="cipher" value="anubis"/>
            <param name="keysize" value="128"/>
         </antcall>
         <antcall target="nist-mct">
            <param name="cipher" value="anubis"/>
            <param name="keysize" value="160"/>
         </antcall>
         <antcall target="nist-mct">
            <param name="cipher" value="anubis"/>
            <param name="keysize" value="192"/>
         </antcall>
         <antcall target="nist-mct">
            <param name="cipher" value="anubis"/>
            <param name="keysize" value="224"/>
         </antcall>
         <antcall target="nist-mct">
            <param name="cipher" value="anubis"/>
            <param name="keysize" value="256"/>
         </antcall>
         <antcall target="nist-mct">
            <param name="cipher" value="anubis"/>
            <param name="keysize" value="288"/>
         </antcall>
         <antcall target="nist-mct">
            <param name="cipher" value="anubis"/>
            <param name="keysize" value="320"/>
         </antcall>
      </parallel>
   </target>

   <target name="nist-mct">
      <echo message="Running NIST MCT tool for ${cipher} (${keysize}-bit key)"/>
      <java classname="gnu.crypto.tool.NistMCT"
            fork="yes" failonerror="true" classpath="${main.jar}"
            output="tv/${cipher}-${keysize}-mct.txt">
         <arg value="${cipher}"/>
         <arg value="${keysize}"/>
      </java>
   </target>

   <!--
   Generating Javadoc API in HTML format ......................................
   -->
   <target name="docs" depends="jar"
           description="Generate programmer documentation in Javadoc HTML format">
      <mkdir dir="${docs.dir}/api"/>
      <javadoc packagenames="gnu.crypto.*"
               sourcepath="${src.dir}"
               destdir="${docs.dir}/api"
               package="true"
               version="true"
               windowtitle="${oneliner}, version ${version}">
         <doctitle>
            <![CDATA[<H1>${oneliner}<BR>Programmer's Documentation</H1>]]>
         </doctitle>
         <header>
            <![CDATA[For the latest news and information visit<BR>
            <A HREF="http://www.gnu.org/software/classpathx/crypto">The GNU Crypto project</A>]]>
         </header>
         <bottom>
            <![CDATA[Copyright &copy;2001, 2002 <A HREF="mailto:classpathx-crypto@gnu.org">
            Free Software Foundation, Inc..</A> All Rights Reserved.]]>
         </bottom>
         <classpath>
            <pathelement location="${main.jar}"/>
         </classpath>
         <group title="GNU Crypto Algorithms"
                packages="gnu.crypto.cipher*,gnu.crypto.hash*,gnu.crypto.mode*,gnu.crypto.pad*,gnu.crypto.prng*"/>
         <group title="GNU Crypto Signature Schemes" packages="gnu.crypto.sig*"/>
         <group title="GNU Crypto JCE Adapters" packages="gnu.crypto.jce*"/>
         <group title="GNU Crypto Tools" packages="gnu.crypto.tool*"/>
         <group title="GNU Crypto Utilities" packages="gnu.crypto.util*"/>
      </javadoc>
   </target>

   <!--
   Make distribution ..........................................................
   -->
   <target name="dist" depends="distclean,jar,docs"
           description="Create .tar.gz and .zip deliverables for the project">
      <property name="build.dir" value="build/${package}-${version}"/>
      <copy todir="${build.dir}">
         <fileset dir="${basedir}">
            <patternset refid="toplevel_files"/>
            <include name="build.xml"/>
            <include name="configure"/>
            <include name="configure.in"/>
            <include name="Makefile.in"/>
         </fileset>
      </copy>
      <copy todir="${build.dir}/${docs.dir}">
         <fileset dir="${docs.dir}" includes="api/**/*"/>
      </copy>
      <copy todir="${build.dir}/${etc.dir}">
         <fileset dir="${etc.dir}"/>
      </copy>
      <copy todir="${build.dir}/${lib.dir}" file="${main.jar}"/>
      <copy todir="${build.dir}/${lib.dir}" file="${test.jar}"/>
      <copy todir="${build.dir}/${src.dir}">
         <fileset dir="${src.dir}">
            <include name="**/*.java"/>
         </fileset>
      </copy>
      <zip basedir="build" zipfile="${package}-${version}.zip"/>
      <tar basedir="build" tarfile="${package}-${version}.tar"/>
      <gzip src="${package}-${version}.tar" zipfile="${package}-${version}.tar.gz"/>
      <delete file="${package}-${version}.tar"/>
      <delete dir="build"/>
   </target>

   <!--
   Cleanup ....................................................................
   -->
   <target name="distclean" depends="clean"
           description="Remove all generated files including deliverables">
      <delete file="${main.jar}"/>
      <delete dir="${docs.dir}/api"/>
   </target>

   <target name="clean" description="Remove object files">
      <delete dir="${classes.dir}"/>
   </target>

   <!--
   junit distribution .........................................................
   -->
   <target name="config-junit" depends="check-junit-ready,get-junit"
           unless="junit.ready">
      <unzip src="junit${junit.version}.zip" dest="${basedir}"/>
      <copy file="junit${junit.version}/junit.jar" todir="${lib.dir}"/>
      <delete dir="junit${junit.version}"/>
   </target>

   <target name="check-junit-ready">
      <available property="junit.ready" file="${junit.jar}"/>
   </target>

   <target name="get-junit" depends="check-junit-available"
           unless="junit.available">
      <get src="${junit.url}/junit${junit.version}.zip"
           dest="junit${junit.version}.zip"/>
   </target>

   <target name="check-junit-available">
      <available property="junit.available" file="junit${junit.version}.zip"/>
   </target>

</project>
